#rantfile -- 07-Jan-2009
import "md5"
require 'date'
require 'fileutils'
include FileUtils

require './tools/buildversion.rb'
require './tools/findlib.rb'

_VER_MAJ = 0
_VER_MIN = 1

#DRIVER="GUI"	# NCURSES, GUI
DRIVER="NCURSES"
PREFIX="/usr/local"


# fails with multiple lua installs
lualib = FindLib(
		["lua5.1", "lua5.0", "lua5", "lua"],
		["/usr/lib", "/usr/local/lib", "/usr/sfw/lib", "/usr/lib64", "/usr/lib32", "/mingw/lib", "/opt"]
		)

luainc = FindInclude(
		["lauxlib.h"],
		["/usr/include", "/usr/local/include", "/usr/sfw/include", "/mingw/include", "/opt"]
		)

y = RUBY_PLATFORM.scan(/(mswin32|mingw32|bccwin32|msdosdjgpp|os2|amigaos|cygwin)/)[0].to_s
case y.to_s
	when "mswin32", "mingw32", "bccwin32", "msdosdjgpp"
		@strPlatform = "ALFC_WIN32"
		var[:exec] = "alfc.exe"
		var[:lua] = "lua.exe"
		var[:luac] = "luac.exe"
		var[:bin2c] = "bin2c.exe"
		var[:gcomp] = "gcomp.exe"
		var[:guide] = "guide.exe"
		var[:gdump] = "gdump.exe"
		var[:exec_boot] = ".\\"

		if DRIVER=="NCURSES"
			var[:libs] = "-lpdcurses -llua -lregex -liberty -lkernel32 -lz"
			PORTABILITY_OBJS = %w( portability_win32.o ncurses_main.o ncurses_interface.o)
			GPORTABILITY_OBJS = %w( portability_win32.o ncurses_guide.o ncurses_interface.o)
		else
			var[:libs] = "-llua -lregex -liberty -lkernel32 -mwindows -lz"
			PORTABILITY_OBJS = %w( portability_win32.o gui_interface.o gui_main.o guicore.o)
			GPORTABILITY_OBJS = %w( portability_win32.o gui_interface.o gui_guide.o guicore.o)
		end
		# mingw has bugs with 64bit stuff (mostly in sprintf etc dropping upper 32bits).
		# this allows us to use %I64u format...
		PORT_CFLAGS = "-Wno-format -DBUILD_WIN32"
	when "cygwin"
		@strPlatform = "ALFC_UNIXLIKE"
		var[:exec] = "alfc.exe"
		var[:lua] = "lua.exe"
		var[:luac] = "luac.exe"
		var[:bin2c] = "bin2c.exe"
		var[:gcomp] = "gcomp.exe"
		var[:guide] = "guide.exe"
		var[:gdump] = "gdump.exe"
		var[:exec_boot] = ".\\"

		var[:libs] = "-lpdcurses -llua -lz"
		PORTABILITY_OBJS = %w( portability_unix.o  ncurses_interface.o)
		GPORTABILITY_OBJS = %w( portability_unix.o  ncurses_interface.o)
		PORT_CFLAGS = "-DBUILD_UNIXLIKE"
	else
		@strPlatform = "ALFC_UNIXLIKE"
		var[:exec] = "alfc"
		var[:lua] = "lua"
		var[:luac] = "luac"
		var[:bin2c] = "bin2c"
		var[:gcomp] = "gcomp"
		var[:guide] = "guide"
		var[:gdump] = "gdump"
		var[:exec_boot] = "./"

		if DRIVER=="NCURSES"
			var[:libs] = "-lm -lncurses #{lualib} -lm -ldl -lz"
			PORTABILITY_OBJS = %w( portability_unix.o ncurses_main.o ncurses_interface.o)
			GPORTABILITY_OBJS = %w( portability_unix.o ncurses_guide.o ncurses_interface.o)
		else
			var[:libs] = "-lm #{lualib} -lX11 -ldl -lz"
			PORTABILITY_OBJS = %w( portability_unix.o gui_interface.o gui_main.o guicore.o)
			GPORTABILITY_OBJS = %w( portability_unix.o gui_interface.o gui_guide.o guicore.o)
		end

		PORT_CFLAGS="-D__USE_LARGEFILE64=1 -D_FILE_OFFSET_BITS=64 -DBUILD_UNIXLIKE"
end

cBV = BuildVersion.new("version", _VER_MAJ, _VER_MIN, 0)
var[:maj] = cBV.major
var[:min] = cBV.minor
var[:build] = cBV.build

CC = "gcc"
CFLAGSX = "-O2 -Wall -pedantic -ggdb -g3 -std=gnu99 -DNMEMWATCH " + PORT_CFLAGS
LIBS = ""

header_files = %w(rantfile main.h)

default_files = %w(global.lua viewer.lua startup.lua shutdown.lua options.ini core_extract.lua
			core_hash.lua viewer_languages.lua filemanager_menu.lua hints.lua viewer_menu.lua)

alfc = %w( dlist.o logwrite.o ini.o
			version.o main.o memwatch.o lua_helper.o
			lua_api.o options.o viewer.o guidedisplay.o
			lua_helper_viewer.o lua_common.o lua_common_api.o
			operations.o lua_hash.o md5.o rmd160.o sha1.o
			menu.o help.o guideload.o tree.o
			)

if DRIVER=="GUI"
	default_files += %w(font.rlf font_small.rlf)
end

desc "Build the app"
task :all => ["auxfiles", "appx", "help"] do
end

task "auxfiles" => ["headers", "fixversion", "version.c", "defaults", "version.c" ] do
end

file "version.c" do
	cBV.IncrementBuild
	cBV.WriteVersion
	var[:maj] = cBV.major
	var[:min] = cBV.minor
	var[:build] = cBV.build
end

task "fixversion" do
	s = Dir["docs/alfc.1*"]
	if s.length > 0
		sys.rm s
	end

	s = Dir["version.c"]
	if s.length > 0
		sys.rm s
	end

	# now build lua helper files
	sys "#{var[:lua]} tools/lua_helper.lua"

	var[:cflags] = CFLAGSX + " -I\"#{luainc}\" "
end

task :headers => header_files do |t|
end

file "#{var[:bin2c]}" => %w(bin2c.o) do |t|
	sys "#{CC} -o #{var[:bin2c]} #{t.prerequisites.join(' ')} "
end

task :defaults => ["docs/help", "docs/manpage", "defaults.h"] do |t|
end

file "defaults.h" => ["#{var[:bin2c]}"] + default_files  do |t|
	sys.rm_f "options.o"
	sys "#{var[:exec_boot]}#{var[:bin2c]} global.lua include_global_lua > defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} viewer.lua include_viewer_lua >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} startup.lua include_startup_lua >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} shutdown.lua include_shutdown_lua >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} options.ini include_options_ini >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} core_extract.lua core_extract_lua >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} core_hash.lua core_hash_lua >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} viewer_languages.lua viewer_languages_lua >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} filemanager_menu.lua filemanager_menu_lua >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} hints.lua hints_lua >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} viewer_menu.lua viewer_menu_lua >> defaults.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} docs/help.hlp help_hlp >> defaults.h"

	#always build gui fonts
	sys "echo \"#ifdef DRV_GUI\" > gui_fonts.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} font.rlf gui_data_font >> gui_fonts.h"
	sys "#{var[:exec_boot]}#{var[:bin2c]} font_small.rlf gui_data_font_small >> gui_fonts.h"
	sys "echo \"#endif\" >> gui_fonts.h"
end

task :appx => alfc + PORTABILITY_OBJS do |t|
	sys "#{CC} -o #{var[:exec]}  #{t.prerequisites.join(' ')} #{var[:libs]}"
end

desc "help"
#task :help => ["auxfiles", "#{var[:gdump]}", "#{var[:guide]}", "#{var[:gcomp]}"] do
task :help => ["auxfiles", "#{var[:gdump]}", "#{var[:guide]}"] do
end

file "#{var[:gcomp]}" => %w(guidecompiler.o dlist.o memwatch.o logwrite.o) do |t|
	sys "#{CC} -o #{var[:gcomp]} #{t.prerequisites.join(' ')} -lz"
    sys "#{var[:exec_boot]}#{var[:gcomp]} docs/guide_create.txt guide_create.gd"
    sys "#{var[:exec_boot]}#{var[:gcomp]} docs/help.txt help.gd"
end

file "#{var[:gdump]}" => %w(guidedump.o guideload.o dlist.o memwatch.o logwrite.o) do |t|
    sys "#{CC} -o #{var[:gdump]} #{t.prerequisites.join(' ')} -lz"
end

file "#{var[:guide]}" => %w(guide.o guidedisplay.o guideload.o dlist.o version.o memwatch.o logwrite.o) + GPORTABILITY_OBJS do |t|
    sys "#{CC} -o #{var[:guide]} #{t.prerequisites.join(' ')} #{var[:libs]} "
end


desc "Build documentation"
task "docs" do
	print "Updating Lua API documentation (html mutli) :: "
	sys "robodoc --html --doc ./docs/lua_api/html_multi --multidoc --rc robodoc_lua.rc"

	print "Updating Lua API documentation (html single) :: "
	sys "robodoc --html --doc ./docs/lua_api/alfc_lua_api --singledoc --rc robodoc_lua.rc"

	print "Updating Lua API documentation (rtf) :: "
	sys "robodoc --rtf --doc ./docs/lua_api/alfc_lua_api --singledoc --rc robodoc_lua.rc"

	print "Updating Lua API documentation (latex) :: "
	sys "robodoc --latex --doc ./docs/lua_api/alfc_lua_api --singledoc --rc robodoc_lua.rc"

	print "Updating Lua API documentation (docbook xml) :: "
	sys "robodoc --dbxml --doc ./docs/lua_api/alfc_lua_api --singledoc --rc robodoc_lua.rc"
end

def src_clean
	x = Dir["*.{bak,o,obj,a,gd}"] + Dir["#{var[:exec]}"] + Dir["memwatch.log"] + Dir["docs/lua_api/*"] + Dir["version.c"]

	x += Dir["#{var[:gcomp]}"]
	x += Dir["#{var[:gdump]}"]
	x += Dir["#{var[:guide]}"]
	x += Dir["#{var[:bin2c]}"]


	x += Dir["lua_helper.c"]
	x += Dir["lua_common_api.c"]
	x += Dir["lua_helper_viewer.c"]

	x += Dir["lua_common.h"]
	x += Dir["lua_api.h"]
	x += Dir["viewer.h"]
	x += Dir["gui_fonts.h"]
	x += Dir["defaults.h"]

	if x.length > 0
		sys.rm_rf x
	end

	if File.directory? 'docs/lua_api'
		sys.rmdir "docs/lua_api"
	end
end

desc "Cleanup..."
task :clean => "docs/clean" do
	src_clean
end

gen Rule, '.rlf' => '.rlf' do |t|
end

gen Rule, '.ini' => '.ini' do |t|
end

gen Rule, '.lua' => '.lua' do |t|
end

gen Rule, '.o' => '.c' do |t|
	sys "#{CC} #{var[:cflags]} -DDRV_#{DRIVER} -c -o #{t.name} #{t.source}"
end

gen Rule, '.h' => '.h' do |t|
	src_clean
end

gen Rule, 'rantfile' => 'rantfile' do
	src_clean
end

gen Rule, '.hlp' => '.txt' do |t|
	sys.ruby "../tools/helpcompiler.rb","#{t.source}","#{t.name}"
end

##############################################################################
desc "Create Makefile"
task :make =>  ["clean", "bin2c.o", "auxfiles", "docs"] do
	if File.exists?("Makefile") == TRUE
		File.delete("Makefile")
	end

	fp = File.new("Makefile", "w")
	if fp != nil

		fp.puts "#"
		fp.puts "# Release Makefile for ALFC v" + cBV.major.to_s + "." + cBV.minor.to_s + "." + cBV.build.to_s
		fp.puts "# Please make sure LUA headers + libs are in the correct paths"
		fp.puts "# Auto-generated by build system, designed for NCurses/PDCurses on unixlikes or win32."
		fp.puts ""

		fp.puts "#"
		fp.puts "# Can be ALFC_UNIXLIKE or ALFC_WIN32"
		fp.puts "#"
		fp.puts "PLATFORM=#{@strPlatform}"
		fp.puts "DRIVER=#{DRIVER}"
		fp.puts "PREFIX=/usr/local"
		fp.puts ""
		fp.puts "ifeq ($(PLATFORM),ALFC_WIN32)"
		fp.puts "ifeq ($(DRIVER),NCURSES)"
		fp.puts "PLATFORM_LIBS=-lpdcurses -llua -lregex -liberty -lkernel32 -lz"
		fp.puts "PLATFORM_OBJS=portability_win32.o ncurses_main.o ncurses_interface.o"
		fp.puts "else"
		fp.puts "PLATFORM_LIBS=-llua -lregex -liberty -lkernel32 -mwindows -lz"
		fp.puts "PLATFORM_OBJS=portability_win32.o gui_interface.o gui_main.o guicore.o"
		fp.puts "endif"
		fp.puts "else"
		fp.puts "ifeq ($(PLATFORM),ALFC_UNIXLIKE)"
		fp.puts "ifeq ($(DRIVER),NCURSES)"
		fp.puts "PLATFORM_LIBS=-lm -lncurses -llua5.1 -lz"
		fp.puts "PLATFORM_OBJS=portability_unix.o ncurses_main.o ncurses_interface.o"
		fp.puts "else"
		fp.puts "PLATFORM_LIBS=-lm -llua5.1 -lX11 -lz"
		fp.puts "PLATFORM_OBJS=portability_unix.o gui_interface.o gui_main.o guicore.o"
		fp.puts "endif"
		fp.puts "else"
		fp.puts "##error Unknown platform"
		fp.puts "endif"
		fp.puts "endif"

		fp.puts ""
		fp.puts "CC=#{CC}"
		fp.puts "CFLAGS=#{CFLAGS} -D$(PLATFORM) -DDRV_$(DRIVER)"

		fp.puts ""
		fp.puts "EXEC=#{var[:exec]}"
		fp.puts ""
		fp.puts "OBJS=" + alfc.join(" ")
		fp.puts ""
		fp.puts "LIBS=" + " $(PLATFORM_LIBS)"
		fp.puts ""

		fp.puts "alfc: $(OBJS) $(PLATFORM_OBJS)"
		fp.puts "\t$(CC) -o $(EXEC) $(OBJS) $(PLATFORM_OBJS) $(LIBS)"
		fp.puts ""

		fp.puts "clean:"
		fp.puts "\trm -rf *.o *.bak $(EXEC)"
		fp.puts ""

		fp.puts "install:"
		fp.puts "\tinstall $(EXEC) -m 755 $(PREFIX)/bin"
		fp.puts "\tinstall -m 755 -d $(PREFIX)/share/man/man1/"
		fp.puts "\tinstall docs/alfc.1* -m 644 -D $(PREFIX)/share/man/man1"
		fp.puts "\tinstall docs/help.hlp -m 644 -D $(PREFIX)/share/alfc/help.hlp"

		fp.close
	end

	ALFCREL = "alfc-#{cBV.major.to_s}.#{cBV.minor.to_s}"

	files = Dir["#{ALFCREL}/"]

	if files.length > 0
		sys.rm_rf "#{ALFCREL}"
	end

	sys.mkdir "#{ALFCREL}"

	files = Dir["*.{[ch],inc,ini}"] + %w(Makefile)
	files.each do |t|
		sys.cp t, "#{ALFCREL}/"
	end

	sys.rm_f "#{ALFCREL}/bin2c.c"

	sys.mkdir "#{ALFCREL}/docs"
	files = %w(docs/help.hlp docs/Changelog docs/readme.txt docs/COPYING docs/alfc.1.gz)
	files.each do |t|
		sys.cp t, "#{ALFCREL}/docs/"
	end

	cp_r "docs/lua_api", "#{ALFCREL}/docs/lua_api"

	sys.mkdir "#{ALFCREL}/scripts"
	files = Dir["scripts/*.lua"]
	files.each do |t|
		sys.cp t, "#{ALFCREL}/scripts/"
	end

	files = Dir["xxlua_*"]
	files.each do |t|
		if File.exists?("#{ALFCREL}/#{t}") == TRUE
			File.delete("#{ALFCREL}/#{t}")
		end
	end

	if File.exists?(" #{ALFCREL}.tar.bz2") == TRUE
		File.delete(" #{ALFCREL}.tar.bz2")
	end
	sys "tar cvfj #{ALFCREL}.tar.bz2 #{ALFCREL}"

end

desc "Install linux in /usr/local/bin"
task :install do
	sys "install alfc -m 755 #{PREFIX}/bin"
	sys "install -m 755 -d #{PREFIX}/share/man/man1/"
	sys "install docs/alfc.1* -m 644 -D #{PREFIX}/share/man/man1"
	sys "install docs/help.hlp -m 644 -D #{PREFIX}/share/alfc/help.hlp"
    if File.exists?("#{PREFIX}/share/applications/") && File.directory?("#{PREFIX}/share/applications/")
        sys "install docs/alfc.desktop -m 644 -D #{PREFIX}/share/applications/"
        sys "install docs/alfc.xpm -m 644 -D #{PREFIX}/share/icons/"
    end
end

subdirs "docs"
