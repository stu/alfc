#rantfile -- 07-Jan-2009
import "md5"

_VER_MAJ = 0
_VER_MIN = 1

DRIVER="X11"	# NCURSES, X11
#DRIVER="NCURSES"


y = RUBY_PLATFORM.scan(/(mswin32|mingw32|bccwin32|msdosdjgpp|os2|amigaos|cygwin)/)
case y.to_s
	when "mswin32", "mingw32", "bccwin32", "msdosdjgpp"
		@strPlatform = "ALFC_WIN32"
		var[:exec] = "alfc.exe"
		var[:lua] = "lua.exe"
		var[:luac] = "luac.exe"
		if DRIVER=="NCURSES"
			var[:libs] = "-lpdcurses -llua -lregex -liberty -lkernel32"
			PORTABILITY_OBJS = %w( portability_win32.o  ncurses_interface.o)
		else
			var[:libs] = "-llua -lregex -liberty -lkernel32 -Lrl -lrl -mwindows"
			PORTABILITY_OBJS = %w( portability_win32.o  x11_interface.o)
		end

		# mingw has bugs with 64bit stuff (mostly in sprintf etc dropping upper 32bits).
		# this allows us to use %I64u format...
		PORT_CFLAGS = "-Wno-format"
	when "cygwin"
		@strPlatform = "ALFC_UNIXLIKE"
		var[:exec] = "alfc.exe"
		var[:lua] = "lua.exe"
		var[:luac] = "luac.exe"
		var[:libs] = "-lpdcurses -llua"
		PORTABILITY_OBJS = %w( portability_unix.o  ncurses_interface.o)
		PORT_CFLAGS = ""
	else
		@strPlatform = "ALFC_UNIXLIKE"
		var[:exec] = "alfc"
		var[:lua] = "lua"
		var[:luac] = "luac"
		if DRIVER=="NCURSES"
			var[:libs] = "-lncurses -llua5.1"
			PORTABILITY_OBJS = %w( portability_unix.o  ncurses_interface.o)
		else
			var[:libs] = "-llua5.1 -Lrl -lrl -lX11"
			PORTABILITY_OBJS = %w( portability_unix.o  x11_interface.o)
		end

		PORT_CFLAGS=""
end


#
# This does all the heavy lifting of the version file
#
class BuildVersion
	attr_reader :major, :minor, :build
	attr_writer :major, :minor, :build

	#constructor
	def initialize(filename, major, minor, build)
		@major = major
		@minor = minor
		@build = build
		@filename = filename

		# read version file into memory, if it exists.
		if File.exists?(@filename) == TRUE
			lx = IO.readlines(@filename)

			# parse lines
			lx.each do |line|
				lx = line.split("=")
				if lx[0] == "VERSION"
					# ... do nothing.
				elsif lx[0] == "VER_MAJ"
					@major = lx[1].to_i
				elsif lx[0] == "VER_MIN"
					@minor = lx[1].to_i
				elsif lx[0] == "VER_BUILD"
					@build = lx[1].to_i
				else
					STDERR.puts "Error! Not a VERSION file I created."

					@major = major
					@minor = minor
					@build = build
				end
			end
		end

	end

	# serialise
	def to_s
		"BuildVersion: v#{@major}.#{@minor}.#build"
	end

	def IncrementBuild
		@build = @build + 1
	end

	def IncrementMinor
		@minor = @minor + 1
		@build = 0
	end

	def IncrementMajor
		@major = @major + 1
		@minor = 0
		@build = 0
	end

	def WriteVersion
		# Delete file if it exists
		if File.exists?(@filename) == TRUE
			File.delete(@filename)
		end

		# Open a new one and write, only if it succeeded
		fp = File.new(@filename, "w")
		if fp != nil
			fp.puts "VERSION=#{@major}.#{@minor}.#{@build}"
			fp.puts "VER_MAJ=#{@major}"
			fp.puts "VER_MIN=#{@minor}"
			fp.puts "VER_BUILD=#{@build}"
			fp.close
		end
	end
end


cBV = BuildVersion.new("version", _VER_MAJ, _VER_MIN, 0)

CC = "gcc"
CFLAGSX = "-D_FORTIFY_SOURCE=0 -O2 -Wall -Werror -pedantic -ggdb -g3 -std=gnu99 -DMEMWATCH " + PORT_CFLAGS
LIBS = ""

alfc = %w( dlist.o logwrite.o ini.o
			version.o main.o memwatch.o lua_helper.o
			lua_api.o options.o viewer.o
			lua_helper_viewer.o lua_common.o lua_common_api.o
			operations.o lua_hash.o md5.o rmd160.o sha1.o
			menu.o
			)

gen Action do
	CFLAGS = CFLAGSX + " -DVMAJ=" + cBV.major.to_s + " -DVMIN=" + cBV.minor.to_s + " -DVBUILD=" + cBV.build.to_s + " -DDRV_" + DRIVER
end

if DRIVER=="NCURSES"
desc "Build the app"
task :all => ["auxfiles", "appx"] do
end
else
desc "Build the app"
task :all => ["auxfiles", "rl/librl.a", "appx"] do
end
end

task "auxfiles" => ["fixversion", "tools" ] do
end

task "fixversion" do
	s = Dir["version.o"]
	if s.length > 0
		sys.rm s
	end

	# now build lua helper files
	sys "#{var[:lua]} lua_helper.lua"
end


task :tools => %w(bin2c.o) do |t|
	sys "#{CC} -o bin2c  #{t.prerequisites.join(' ')} "
	sys "bin2c global.lua include_global_lua > defaults.h"
	sys "bin2c viewer.lua include_viewer_lua >> defaults.h"
	sys "bin2c startup.lua include_startup_lua >> defaults.h"
	sys "bin2c shutdown.lua include_shutdown_lua >> defaults.h"
	sys "bin2c options.ini include_options_ini >> defaults.h"
	sys "bin2c core_extract.lua core_extract_lua >> defaults.h"
	sys "bin2c core_hash.lua core_hash_lua >> defaults.h"
	sys "bin2c viewer_languages.lua viewer_languages_lua >> defaults.h"
if DRIVER=="X11"
	sys "bin2c font.rlf x11_data_font > x11_fonts.h"
	sys "bin2c font_small.rlf x11_data_font_small >> x11_fonts.h"
end
end

task :appx => alfc + PORTABILITY_OBJS do |t|
	sys "#{CC} -o #{var[:exec]}  #{t.prerequisites.join(' ')} #{var[:libs]}"

	cBV.IncrementBuild
	cBV.WriteVersion
end

desc "Build documentation"
task "docs" do
	print "Updating Lua API documentation (html mutli) :: "
	sys "robodoc --rc robodoc_lua_multi_html.rc"

	print "Updating Lua API documentation (html single) :: "
	sys "robodoc --rc robodoc_lua_single_html.rc"

	print "Updating Lua API documentation (rtf) :: "
	sys "robodoc --rc robodoc_lua_rtf.rc"

	################

	print "Updating Core documentation (html mutli) :: "
	sys "robodoc --rc robodoc_core_multi_html.rc"

	print "Updating Core documentation (html single) :: "
	sys "robodoc --rc robodoc_core_single_html.rc"

	print "Updating Core documentation (rtf) :: "
	sys "robodoc --rc robodoc_core_rtf.rc"
end

desc "Cleanup..."
task :clean => "rl/clean" do
	x = Dir["*.{bak,o,obj,a}"] + Dir["#{var[:exec]}"] + Dir["memwatch.log"]  + Dir["doc"] + Dir["Makefile"] + Dir["bin2c"]

	x += Dir["lua_helper.c"]
	x += Dir["lua_common_api.c"]
	x += Dir["lua_helper_viewer.c"]

	x += Dir["lua_common.h"]
	x += Dir["lua_api.h"]
	x += Dir["viewer.h"]

	if x.length > 0
		sys.rm_rf x
	end
end

gen Rule, '.o' => '.c' do |t|
	sys "#{CC} #{CFLAGS} -c -o #{t.name} #{t.source}"
end



##############################################################################
desc "Create Makefile"
task :make =>  ["clean", "bin2c.o", "auxfiles"] do
	if File.exists?("Makefile") == TRUE
		File.delete("Makefile")
	end

	fp = File.new("Makefile", "w")
	if fp != nil

		fp.puts "#"
		fp.puts "# Release Makefile for ALFC v" + cBV.major.to_s + "." + cBV.minor.to_s + "." + cBV.build.to_s
		fp.puts "# Please make sure LUA headers + libs are in the correct paths"
		fp.puts "# Auto-generated by build system"
		fp.puts ""

		fp.puts "#"
		fp.puts "# Can be ALFC_UNIXLIKE or ALFC_WIN32"
		fp.puts "#"
		fp.puts "PLATFORM=#{@strPlatform}"

		fp.puts ""
		fp.puts "ifeq ($(PLATFORM),ALFC_WIN32)"
		fp.puts "PLATFORM_LIBS=-lpdcurses -llua -lregex -liberty -lkernel32"
		fp.puts "PLATFORM_OBJS=portability_win32.o"
		fp.puts "else"
		fp.puts "ifeq ($(PLATFORM),ALFC_UNIXLIKE)"
		fp.puts "PLATFORM_LIBS=-lncurses -llua5.1"
		fp.puts "PLATFORM_OBJS=portability_unix.o"
		fp.puts "else"
		fp.puts "##error Unknown platform"
		fp.puts "endif"
		fp.puts "endif"

		fp.puts ""
		fp.puts "CC=#{CC}"
		fp.puts "CFLAGS=#{CFLAGS} -D$(PLATFORM)"

		fp.puts ""
		fp.puts "EXEC=#{var[:exec]}"
		fp.puts ""
		fp.puts "OBJS=" + alfc.join(" ")
		fp.puts ""
		fp.puts "LIBS=" + " $(PLATFORM_LIBS)"
		fp.puts ""

		fp.puts "alfc: $(OBJS) $(PLATFORM_OBJS)"
		fp.puts "\t$(CC) -o $(EXEC) $(OBJS) $(PLATFORM_OBJS) $(LIBS)"
		fp.puts ""

		fp.puts "clean:"
		fp.puts "\trm -rf *.o *.bak $(EXEC)"
		fp.puts ""

		fp.close
	end

	ALFCREL = "alfc-#{cBV.major.to_s}.#{cBV.minor.to_s}"

	files = Dir["#{ALFCREL}/"]

	if files.length > 0
		sys.rm_rf "#{ALFCREL}"
	end

	sys.mkdir "#{ALFCREL}"

	files = Dir["*.{[ch],inc,ini}"] + %w(Makefile)
	files.each do |t|
		sys.cp t, "#{ALFCREL}/"
	end

	sys.mkdir "#{ALFCREL}/docs"
	files = %w(docs/Changelog docs/readme.txt docs/COPYING)
	files.each do |t|
		sys.cp t, "#{ALFCREL}/docs/"
	end


	files = Dir["xxlua_*"]
	files.each do |t|
		if File.exists?("#{ALFCREL}/#{t}") == TRUE
			File.delete("#{ALFCREL}/#{t}")
		end
	end


	if File.exists?(" #{ALFCREL}.tar.bz2") == TRUE
		File.delete(" #{ALFCREL}.tar.bz2")
	end
	sys "tar cvfj #{ALFCREL}.tar.bz2 #{ALFCREL}"

end

subdirs "rl"

