#rantfile -- 07-Jan-2009
import "md5"

_VER_MAJ = 0
_VER_MIN = 1


y = RUBY_PLATFORM.scan(/(mswin32|mingw32|bccwin32|msdosdjgpp|os2|amigaos|cygwin)/)
case y.to_s
	when "mswin32", "mingw32", "bccwin32", "msdosdjgpp"
		@strPlatform = "ALFC_WIN32"
		var[:exec] = "alfc.exe"
		var[:lua] = "lua.exe"
		var[:luac] = "luac.exe"
		var[:libs] = "-lpdcurses -llua -lregex -liberty -lkernel32"
		PORTABILITY_OBJS = %w( portability_win32.o )
		# mingw has bugs with 64bit stuff (mostly in sprintf etc dropping upper 32bits).
		# this allows us to use %I64u format...
		PORT_CFLAGS = "-Wno-format"
	when "cygwin"
		@strPlatform = "ALFC_UNIXLIKE"
		var[:exec] = "alfc.exe"
		var[:lua] = "lua.exe"
		var[:luac] = "luac.exe"
		var[:libs] = "-lpdcurses -llua"
		PORTABILITY_OBJS = %w( portability_unix.o )
		PORT_CFLAGS = ""
	else
		@strPlatform = "ALFC_UNIXLIKE"
		var[:exec] = "alfc"
		var[:lua] = "lua"
		var[:luac] = "luac"
		var[:libs] = "-lncurses -llua5.1"
		PORTABILITY_OBJS = %w( portability_unix.o )
		PORT_CFLAGS=""
end


#
# This does all the heavy lifting of the version file
#
class BuildVersion
	attr_reader :major, :minor, :build
	attr_writer :major, :minor, :build

	#constructor
	def initialize(filename, major, minor, build)
		@major = major
		@minor = minor
		@build = build
		@filename = filename

		# read version file into memory, if it exists.
		if File.exists?(@filename) == TRUE
			lx = IO.readlines(@filename)

			# parse lines
			lx.each do |line|
				lx = line.split("=")
				if lx[0] == "VERSION"
					# ... do nothing.
				elsif lx[0] == "VER_MAJ"
					@major = lx[1].to_i
				elsif lx[0] == "VER_MIN"
					@minor = lx[1].to_i
				elsif lx[0] == "VER_BUILD"
					@build = lx[1].to_i
				else
					STDERR.puts "Error! Not a VERSION file I created."

					@major = major
					@minor = minor
					@build = build
				end
			end
		end

	end

	# serialise
	def to_s
		"BuildVersion: v#{@major}.#{@minor}.#build"
	end

	def IncrementBuild
		@build = @build + 1
	end

	def IncrementMinor
		@minor = @minor + 1
		@build = 0
	end

	def IncrementMajor
		@major = @major + 1
		@minor = 0
		@build = 0
	end

	def WriteVersion
		# Delete file if it exists
		if File.exists?(@filename) == TRUE
			File.delete(@filename)
		end

		# Open a new one and write, only if it succeeded
		fp = File.new(@filename, "w")
		if fp != nil
			fp.puts "VERSION=#{@major}.#{@minor}.#{@build}"
			fp.puts "VER_MAJ=#{@major}"
			fp.puts "VER_MIN=#{@minor}"
			fp.puts "VER_BUILD=#{@build}"
			fp.close
		end
	end
end


cBV = BuildVersion.new("version", _VER_MAJ, _VER_MIN, 0)

CC = "gcc"
CFLAGSX = "-O2 -Wall -Werror -pedantic -ggdb -g3 -std=gnu99 -DMEMWATCH " + PORT_CFLAGS
LIBS = ""

alfc = %w( version.o main.o memwatch.o lua_helper.o lua_api.o options.o ncurses_interface.o viewer.o) + PORTABILITY_OBJS

gen Action do
	CFLAGS = CFLAGSX + " -DVMAJ=" + cBV.major.to_s + " -DVMIN=" + cBV.minor.to_s + " -DVBUILD=" + cBV.build.to_s
end

desc "Build the app"
task :app => ["fixversion", "tools", "appx"] do
end


task "fixversion" do
	s = Dir["version.o"]
	if s.length > 0
		sys.rm s
	end

	# now build lua helper files
	sys "#{var[:lua]}", "lua_helper.lua"
end


task :tools => %w(bin2c.o) do |t|
	sys "#{CC} -o bin2c  #{t.prerequisites.join(' ')} "
	sys "bin2c global.lua include_global_lua > defaults.h"
	sys "bin2c global.lua include_startup_lua >> defaults.h"
	sys "bin2c global.lua include_shutdown_lua >> defaults.h"
	sys "bin2c global.lua include_options_ini >> defaults.h"
end

task :appx => alfc do |t|
	sys "#{CC} -o #{var[:exec]}  #{t.prerequisites.join(' ')} stucore/libstucore.a #{var[:libs]}"

	cBV.IncrementBuild
	cBV.WriteVersion
end

desc "Build documentation"
task "docs" do
	print "Updating Lua API documentation (html mutli) :: "
	sys "robodoc --rc robodoc_lua_multi_html.rc"

	print "Updating Lua API documentation (html single) :: "
	sys "robodoc --rc robodoc_lua_single_html.rc"

	print "Updating Lua API documentation (rtf) :: "
	sys "robodoc --rc robodoc_lua_rtf.rc"

	################

	print "Updating Core documentation (html mutli) :: "
	sys "robodoc --rc robodoc_core_multi_html.rc"

	print "Updating Core documentation (html single) :: "
	sys "robodoc --rc robodoc_core_single_html.rc"

	print "Updating Core documentation (rtf) :: "
	sys "robodoc --rc robodoc_core_rtf.rc"
end

desc "Cleanup..."
task :clean do
	x = Dir["*.{bak,o,obj}"] + Dir["#{var[:exec]}"] + Dir["memwatch.log"]  + Dir["lua_helper.c"] + Dir["doc"]
	if x.length > 0
		sys.rm_rf x
	end
end

gen Rule, '.o' => '.c' do |t|
	sys "#{CC} #{CFLAGS} -c -o #{t.name} #{t.source}"
end
