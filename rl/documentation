
SGEO: I've hacked up rllib a tonne. 
below is the original documentation.


--------------

This is the documentation for the RLLib API.

Instead of using the normal main() function, applications that use RLLib should use rlmain() instead.

Window management:

create_window()
  Creates a window. You need to call this before using anything else in RLLib.
  x_size, y_size - size of window in characters
  title - title of the window
  font_file - location of the font used to display characters

destroy_window()
  Destroys the window. You need to call this at the end of your program.

window_width_in_chars(), window_height_in_chars()
  Get the size of the window.

Color:

struct rgbcolor
  A color. You shouldn't need to manually create any of these.

rgb()
  Returns a new rgbcolor that you can use.
  r, g, b - red, green, and blue components of the color

black, gray...
  Some predefined colors you can use without having to use the rgb function.

Keyboard input:

struct key
  A key pressed by the user.
  shift - whether the shift key was pressed
  ctrl - whether the control (ctrl) key was pressed
  c - the ASCII character of the key.
  is_numpad - only useful if the key was a number, 1 if the key was an arrow key or numpad key (with numlock off), 0 if it's actually a number

get_key()
  Gets a key pressed by the user. This can be used like this:
  //check if the player wants to move left:
  key k = get_key();
  if (k.c == '4') {
    move_player_left();
  }

ctrl_offset
  Add this to a letter to get its code when combined with the ctrl key. The letter should be lowercase:
  //calculates the code for ctrl+c
  int ctrl_c_code = 'c' + ctrl_offset;

Character display:

display_char()
  Displays a character.
  char_num - the ASCII code of the character
  start_x, start_y - the position of the character, in character-widths
  fore - the foreground color of the character
  back - the background color of the character

display_char_offset_foo()
  Displays a character, offset in the x or y directions. It will be placed half a character-width beyond where it would be if you used display_char(). This is useful for displaying hexagonal maps or centering text, for example.
  char_num - the ASCII code of the character
  start_x, start_y - the position of the character, in character-widths
  fore - the foreground color of the character
  back - the background color of the character

Messages:

struct message_type
  A message type that the functions below can use. Basically a message location.

struct message_style
  A message style is a foreground and background color for messages.

enum message_types
  An enumeration of the types of messages that can be displayed. You will probably have to add new entries yourself. Add them before the entry num_msg_types.

enum_message_styles
  Same thing, but for message styles.

set_msg_types
  Sets a message type. You will need to call this to initialize every type of message you use.

set_msg_style
  Same thing, but for message styles.

clear_msg
  Clears all messages of a certain type from the screen.
  type - the type of message to clear, should be from enum message_types

print_msg
  Prints a message of a certain type, with a certain style.
  type - the type of message to print, should be from enum message_types
  style - the style of message to print, should be from enum message_styles
  msg - a format string to be displayed. Works like printf, and supports %s (string), %c (char), and %i (integer). The first letter of the message is always capitalized, which can be helpful when displaying messages like "<monster name> hits you".

Low-level functions:

These shouldn't need to be used at all. Almost all of these are used by other functions in RLLib.
